package cute.managers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import cute.modules.enums.Category;
import cute.modules.render.Fullbright;
import cute.modules.test.TestModule;
import cute.eventapi.EventManager;
import cute.eventapi.EventTarget;
import cute.events.ClientTickEvent;
import cute.events.KeyboardEvent;
import cute.modules.Module;

public class ModuleManager extends BaseManager
{
	public static final ModuleManager INSTANCE = new ModuleManager();
	
	private ModuleManager() 
	{
		EventManager.register(this);
	}
	
	public static List<Module> modules = Arrays.asList
				(
					new TestModule(),
//					new ClickGUI(),
//					
//					new BlockESP(),
//					new EntityESP(),
					new Fullbright()
//					new Tracers(),
//					new ProjectileTracer(),
//					new NoRender(),
//					
//					new AntiPotion()
				);
	
	
	
	public static List<Module> getModules()
	{
		return new ArrayList(modules);
	}
	
	public static List<Module> getModulesInCategory(Category cat)
	{
		List<Module> module = new ArrayList();
		
		for (Module m : modules) 
		{
			if (m.getCategory().equals(cat))
				module.add(m);
		}
		
		return module;
	}
	
	public static Module getModuleByName(String name) 
	{
		return null;
		// return modules.stream().filter(module -> module.getName().equalsIgnoreCase(name)).findFirst().orElse(null);
	}
	
	public static Module getModuleByClass(Class<?> clazz) 
	{
		return null;
		// return modules.stream().filter(module -> module.getClass().equals(clazz)).findFirst().orElse(null);
	}
	
	
	@EventTarget
	public void onTick(ClientTickEvent event) 
	{
		System.out.println("tick");
		ModuleManager.onUpdate();
	}
	
//	@SideOnly(Side.CLIENT)
//	@SubscribeEvent(priority=EventPriority.NORMAL, receiveCanceled=true)
//	public void onFastTick(TickEvent event) 
//	{
//		ModuleManager.onFastUpdate();
//	}

	
	public static void onUpdate() 
	{
		for (Module m : modules) 
		{
			if (m.isEnabled())			
				m.onUpdate();
		}
	}
	
	public static void onFastUpdate() 
	{
		for (Module m : modules) 
		{
			if (m.isEnabled())
				m.onFastUpdate();
		}
	}
	
	public static void onServerUpdate() 
	{
		for (Module m : modules) 
		{
			if (m.isEnabled())
				m.onServerUpdate();
		}
	}
	
	
	@EventTarget
	public void keyboardEvent(KeyboardEvent key)
	{
		System.out.println("keypress");
		System.out.println(key.getKeyCode());
	}
	
//	@SideOnly(Side.CLIENT)
//	@SubscribeEvent(priority=EventPriority.NORMAL, receiveCanceled=true)
//	public void keyboardEvent(InputEvent.KeyInputEvent key) 
//	{
//		if (mc.currentScreen instanceof GuiScreen)
//			return;
//		
//		for (Module m : modules) 
//		{
//			try 
//			{
//				if (Keyboard.isKeyDown(m.getKeybind().getKeyCode()) && !m.isKeyDown()) 
//				{
//					m.setKeyDown(true);
//					m.toggle();
//				}
//				else 
//				{
//					m.setKeyDown(false);
//				}
//			}
//			catch (Exception e) 
//			{
//				 e.printStackTrace();
//			}
//		}
//	}
//	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//	public static void keyListen() 
//	{
//		if (mc.currentScreen instanceof GuiScreen)
//			return;
//		
//		for (Module m : modules) 
//		{
//			try 
//			{
//				if (Keyboard.isKeyDown(Keyboard.KEY_NONE) || Keyboard.isKeyDown(Keyboard.CHAR_NONE))
//					return;
//				
//				if (Keyboard.isKeyDown(m.getKeybind().getKeyCode()) && !m.isKeyDown()) 
//				{
//					m.setKeyDown(true);
//					m.toggle();
//				}
//	
//				else if (!Keyboard.isKeyDown(m.getKeybind().getKeyCode()))
//					m.setKeyDown(false);
//	
//			}
//			catch (Exception e) 
//			{
//				 e.printStackTrace();
//			}
//		}
//	}
}
